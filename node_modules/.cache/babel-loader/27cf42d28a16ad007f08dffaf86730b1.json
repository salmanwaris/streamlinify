{"ast":null,"code":"var _jsxFileName = \"/Users/SWKHAN/Downloads/streamlinify/src/components/Messages/Messages.component.jsx\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport MessageHeader from './MessageHeader/MessageHeader.component';\nimport MessageContent from \"./MessageContent/MessageContent.component\";\nimport MessageInput from \"./MessageInput/MessageInput.component\";\nimport { connect } from \"react-redux\";\nimport { setfavouriteChannel, removefavouriteChannel } from \"../../store/actioncreator\";\nimport firebase from \"../../server/firebase\";\nimport { Segment, Comment } from 'semantic-ui-react';\nimport \"./Messages.css\";\n\nconst Messages = props => {\n  var _props$channel2, _props$channel3;\n\n  const messageRef = firebase.database().ref('messages');\n  const usersRef = firebase.database().ref('users');\n  const [messagesState, setMessagesState] = useState([]);\n  const [searchTermState, setSearchTermState] = useState(\"\");\n  let divRef = useRef();\n  useEffect(() => {\n    if (props.channel) {\n      setMessagesState([]);\n      messageRef.child(props.channel.id).on('child_added', snap => {\n        setMessagesState(currentState => {\n          let updatedState = [...currentState];\n          updatedState.push(snap.val());\n          return updatedState;\n        });\n      });\n      return () => messageRef.child(props.channel.id).off();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [props.channel]);\n  useEffect(() => {\n    if (props.user) {\n      usersRef.child(props.user.uid).child(\"favourite\").on('child_added', snap => {\n        props.setfavouriteChannel(snap.val());\n      });\n      usersRef.child(props.user.uid).child(\"favourite\").on('child_removed', snap => {\n        props.removefavouriteChannel(snap.val());\n      });\n      return () => usersRef.child(props.user.uid).child(\"favourite\").off();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [props.user]);\n  useEffect(() => {\n    divRef.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messagesState]);\n\n  const displayMessages = () => {\n    let messagesToDisplay = searchTermState ? filterMessageBySearchTerm() : messagesState;\n\n    if (messagesToDisplay.length > 0) {\n      return messagesToDisplay.map(message => {\n        return /*#__PURE__*/React.createElement(MessageContent, {\n          imageLoaded: imageLoaded,\n          ownMessage: message.user.id === props.user.uid,\n          key: message.timestamp,\n          message: message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 24\n          }\n        });\n      });\n    }\n  };\n\n  const imageLoaded = () => {\n    divRef.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n\n  const uniqueusersCount = () => {\n    const uniqueUsers = messagesState.reduce((acc, message) => {\n      if (!acc.includes(message.user.name)) {\n        acc.push(message.user.name);\n      }\n\n      return acc;\n    }, []);\n    return uniqueUsers.length;\n  };\n\n  const searchTermChange = e => {\n    const target = e.target;\n    setSearchTermState(target.value);\n  };\n\n  const filterMessageBySearchTerm = () => {\n    const regex = new RegExp(searchTermState, \"gi\");\n    const messages = messagesState.reduce((acc, message) => {\n      if (message.content && message.content.match(regex) || message.user.name.match(regex)) {\n        acc.push(message);\n      }\n\n      return acc;\n    }, []);\n    return messages;\n  };\n\n  const starChange = () => {\n    let favouriteRef = usersRef.child(props.user.uid).child(\"favourite\").child(props.channel.id);\n\n    if (isStarred()) {\n      favouriteRef.remove();\n    } else {\n      favouriteRef.set({\n        channelId: props.channel.id,\n        channelName: props.channel.name\n      });\n    }\n  };\n\n  const isStarred = () => {\n    var _props$channel;\n\n    return Object.keys(props.favouriteChannels).includes((_props$channel = props.channel) === null || _props$channel === void 0 ? void 0 : _props$channel.id);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(MessageHeader, {\n    starChange: starChange,\n    starred: isStarred(),\n    isPrivateChat: (_props$channel2 = props.channel) === null || _props$channel2 === void 0 ? void 0 : _props$channel2.isPrivateChat,\n    searchTermChange: searchTermChange,\n    channelName: (_props$channel3 = props.channel) === null || _props$channel3 === void 0 ? void 0 : _props$channel3.name,\n    uniqueUsers: uniqueusersCount(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 38\n    }\n  }), /*#__PURE__*/React.createElement(Segment, {\n    className: \"messagecontent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, displayMessages(), /*#__PURE__*/React.createElement(\"div\", {\n    ref: currentEl => divRef = currentEl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(MessageInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    channel: state.channel.currentChannel,\n    user: state.user.currentUser,\n    favouriteChannels: state.favouriteChannel.favouriteChannel\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setfavouriteChannel: channel => dispatch(setfavouriteChannel(channel)),\n    removefavouriteChannel: channel => dispatch(removefavouriteChannel(channel))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);","map":{"version":3,"sources":["/Users/SWKHAN/Downloads/streamlinify/src/components/Messages/Messages.component.jsx"],"names":["React","useEffect","useState","useRef","MessageHeader","MessageContent","MessageInput","connect","setfavouriteChannel","removefavouriteChannel","firebase","Segment","Comment","Messages","props","messageRef","database","ref","usersRef","messagesState","setMessagesState","searchTermState","setSearchTermState","divRef","channel","child","id","on","snap","currentState","updatedState","push","val","off","user","uid","scrollIntoView","behavior","displayMessages","messagesToDisplay","filterMessageBySearchTerm","length","map","message","imageLoaded","timestamp","uniqueusersCount","uniqueUsers","reduce","acc","includes","name","searchTermChange","e","target","value","regex","RegExp","messages","content","match","starChange","favouriteRef","isStarred","remove","set","channelId","channelName","Object","keys","favouriteChannels","isPrivateChat","currentEl","mapStateToProps","state","currentChannel","currentUser","favouriteChannel","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState,useRef } from 'react';\n\nimport MessageHeader from './MessageHeader/MessageHeader.component';\nimport MessageContent from \"./MessageContent/MessageContent.component\";\nimport MessageInput from \"./MessageInput/MessageInput.component\";\nimport { connect } from \"react-redux\";\nimport { setfavouriteChannel, removefavouriteChannel } from \"../../store/actioncreator\";\nimport firebase from \"../../server/firebase\";\nimport { Segment, Comment } from 'semantic-ui-react';\nimport \"./Messages.css\"; \n\nconst Messages = (props) => {\n\n    const messageRef = firebase.database().ref('messages');\n\n    const usersRef = firebase.database().ref('users');\n\n    const [messagesState, setMessagesState] = useState([]);\n\n    const [searchTermState, setSearchTermState] = useState(\"\");\n\n    let divRef = useRef();\n\n    useEffect(() => {\n        if (props.channel) {\n            setMessagesState([]);\n            messageRef.child(props.channel.id).on('child_added', (snap) => {\n                setMessagesState((currentState) => {\n                    let updatedState = [...currentState];\n                    updatedState.push(snap.val());\n                    return updatedState;\n                })\n            })\n\n            return () => messageRef.child(props.channel.id).off();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.channel])\n\n    useEffect(() => {\n\n        if (props.user) {\n            usersRef.child(props.user.uid).child(\"favourite\")\n                .on('child_added', (snap) => {\n                    props.setfavouriteChannel(snap.val());\n                })\n\n            usersRef.child(props.user.uid).child(\"favourite\")\n                .on('child_removed', (snap) => {\n                    props.removefavouriteChannel(snap.val());\n                })\n\n            return () => usersRef.child(props.user.uid).child(\"favourite\").off();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.user])\n\n    useEffect(()=> {\n        divRef.scrollIntoView({behavior : 'smooth'});\n    },[messagesState])\n\n    const displayMessages = () => {\n        let messagesToDisplay = searchTermState ? filterMessageBySearchTerm() : messagesState;\n        if (messagesToDisplay.length > 0) {\n            return messagesToDisplay.map((message) => {\n                return <MessageContent imageLoaded={imageLoaded} ownMessage={message.user.id === props.user.uid} key={message.timestamp} message={message} />\n            })\n        }\n    }\n\n    const imageLoaded= () => {\n        divRef.scrollIntoView({behavior : 'smooth'});\n    }\n\n    const uniqueusersCount = () => {\n        const uniqueUsers = messagesState.reduce((acc, message) => {\n            if (!acc.includes(message.user.name)) {\n                acc.push(message.user.name);\n            }\n            return acc;\n        }, []);\n\n        return uniqueUsers.length;\n    }\n\n    const searchTermChange = (e) => {\n        const target = e.target;\n        setSearchTermState(target.value);\n    }\n\n    const filterMessageBySearchTerm = () => {\n        const regex = new RegExp(searchTermState, \"gi\");\n        const messages = messagesState.reduce((acc, message) => {\n            if ((message.content && message.content.match(regex)) || message.user.name.match(regex)) {\n                acc.push(message);\n            }\n            return acc;\n        }, []);\n\n        return messages;\n    }\n\n    const starChange = () => {\n        let favouriteRef = usersRef.child(props.user.uid).child(\"favourite\").child(props.channel.id);\n        if (isStarred()) {\n            favouriteRef.remove();\n        } else {\n            favouriteRef.set({ channelId: props.channel.id, channelName: props.channel.name })\n        }\n    }\n\n    const isStarred = () => {\n        return Object.keys(props.favouriteChannels).includes(props.channel?.id);\n    }\n\n    return <div className=\"messages\"><MessageHeader starChange={starChange} starred={isStarred()} isPrivateChat={props.channel?.isPrivateChat} searchTermChange={searchTermChange} channelName={props.channel?.name} uniqueUsers={uniqueusersCount()} />\n        <Segment className=\"messagecontent\">\n            <Comment.Group>\n                {displayMessages()}\n                <div ref={currentEl => divRef = currentEl}></div>\n            </Comment.Group>\n        </Segment>\n        <MessageInput /></div>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        channel: state.channel.currentChannel,\n        user: state.user.currentUser,\n        favouriteChannels: state.favouriteChannel.favouriteChannel\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setfavouriteChannel: (channel) => dispatch(setfavouriteChannel(channel)),\n        removefavouriteChannel: (channel) => dispatch(removefavouriteChannel(channel)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);"]},"metadata":{},"sourceType":"module"}