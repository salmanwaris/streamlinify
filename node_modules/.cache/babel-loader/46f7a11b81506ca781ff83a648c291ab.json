{"ast":null,"code":"var _jsxFileName = \"/Users/SWKHAN/Downloads/streamlinify/src/components/SideBar/Notification/Notification.component.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Label } from 'semantic-ui-react';\nimport firebase from \"../../../server/firebase\";\nexport const Notification = props => {\n  const messagesRef = firebase.database().ref(\"messages\");\n  const usersRef = firebase.database().ref(\"users\");\n  const [channelsVisitedState, setChannelsVisitedState] = useState({});\n  const [messagesTimeStampState, setMessagesTimeStampState] = useState({});\n  useEffect(() => {\n    if (props.user) {\n      usersRef.child(props.user.uid).child('lastVisited').on('value', snap => {\n        setChannelsVisitedState(snap.val());\n      });\n      messagesRef.on('value', snap => {\n        let messages = snap.val();\n        let channelsId = Object.keys(messages);\n        let messagesTimeStamp = {};\n        channelsId.forEach(channelId => {\n          let channelMessageKeys = Object.keys(messages[channelId]);\n          channelMessageKeys.reduce((agg, item) => {\n            messagesTimeStamp[channelId] = [...(messagesTimeStamp[channelId] || [])];\n            messagesTimeStamp[channelId].push(messages[channelId][item].timestamp);\n          });\n        });\n        setMessagesTimeStampState(messagesTimeStamp);\n      });\n    }\n  }, [props.user]);\n\n  const calculateNotificationCount = channelId => {\n    if (channelsVisitedState && messagesTimeStampState && props.channel && props.channel.id !== channelId) {\n      let lastVisited = channelsVisitedState[channelId];\n      let channelMessagesTimeStamp = messagesTimeStampState[channelId];\n\n      if (channelMessagesTimeStamp) {\n        let notificationCount = channelMessagesTimeStamp.filter(timestamp => !lastVisited || lastVisited < timestamp).length;\n        return notificationCount === 0 ? null : /*#__PURE__*/React.createElement(Label, {\n          color: \"red\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 57\n          }\n        }, notificationCount);\n      }\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \" \", props.displayName, calculateNotificationCount(props.notificationChannelId), \" \");\n};","map":{"version":3,"sources":["/Users/SWKHAN/Downloads/streamlinify/src/components/SideBar/Notification/Notification.component.jsx"],"names":["React","useState","useEffect","Label","firebase","Notification","props","messagesRef","database","ref","usersRef","channelsVisitedState","setChannelsVisitedState","messagesTimeStampState","setMessagesTimeStampState","user","child","uid","on","snap","val","messages","channelsId","Object","keys","messagesTimeStamp","forEach","channelId","channelMessageKeys","reduce","agg","item","push","timestamp","calculateNotificationCount","channel","id","lastVisited","channelMessagesTimeStamp","notificationCount","filter","length","displayName","notificationChannelId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Label } from 'semantic-ui-react';\n\nimport firebase from \"../../../server/firebase\";\n\nexport const Notification = (props) => {\n\n    const messagesRef = firebase.database().ref(\"messages\");\n\n    const usersRef = firebase.database().ref(\"users\");\n\n    const [channelsVisitedState, setChannelsVisitedState] = useState({});\n\n\n    const [messagesTimeStampState, setMessagesTimeStampState] = useState({});\n\n\n    useEffect(() => {\n\n        if (props.user) {\n            usersRef.child(props.user.uid).child('lastVisited').on('value', snap => {\n                setChannelsVisitedState(snap.val());\n            })\n\n            messagesRef.on('value', snap => {\n                let messages = snap.val();\n\n                let channelsId = Object.keys(messages);\n                let messagesTimeStamp = {};\n                channelsId.forEach((channelId) => {\n                    let channelMessageKeys = Object.keys(messages[channelId]);\n                    \n                    channelMessageKeys.reduce((agg, item) => {\n                        messagesTimeStamp[channelId] = [...messagesTimeStamp[channelId] || []];\n                        messagesTimeStamp[channelId].push(messages[channelId][item].timestamp);\n                    })\n                })\n                setMessagesTimeStampState(messagesTimeStamp);\n            })\n        }\n    }, [props.user]);\n\n    const calculateNotificationCount = (channelId) => {\n\n        if (channelsVisitedState && messagesTimeStampState && props.channel && props.channel.id !== channelId) {\n\n            let lastVisited = channelsVisitedState[channelId];\n\n            let channelMessagesTimeStamp = messagesTimeStampState[channelId];\n\n            if (channelMessagesTimeStamp) {\n                let notificationCount = channelMessagesTimeStamp.filter(timestamp => !lastVisited || lastVisited < timestamp).length;\n                return notificationCount === 0 ? null : <Label color=\"red\">{notificationCount}</Label>\n            }\n        }\n\n        return null;\n    }\n\n    return <> {props.displayName}{calculateNotificationCount(props.notificationChannelId)} </>;\n\n}"]},"metadata":{},"sourceType":"module"}