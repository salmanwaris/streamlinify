{"ast":null,"code":"var _jsxFileName = \"/Users/SWKHAN/Downloads/streamlinify/src/components/SideBar/PrivateChat/PrivateChat.component.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\";\nimport { Notification } from \"../Notification/Notification.component\";\nimport { Menu, Icon } from 'semantic-ui-react';\n\nconst PrivateChat = props => {\n  const [usersState, setUsersState] = useState([]);\n  const [connectedUsersState, setConnectedUsersState] = useState([]);\n  const usersRef = firebase.database().ref(\"users\");\n  const connectedRef = firebase.database().ref(\".info/connected\");\n  const statusRef = firebase.database().ref(\"status\");\n  useEffect(() => {\n    usersRef.on('child_added', snap => {\n      setUsersState(currentState => {\n        let updatedState = [...currentState];\n        let user = snap.val();\n        user.name = user.displayName;\n        user.id = snap.key;\n        user.isPrivateChat = true;\n        updatedState.push(user);\n        return updatedState;\n      });\n    });\n    connectedRef.on(\"value\", snap => {\n      if (props.user && snap.val()) {\n        const userStatusRef = statusRef.child(props.user.uid);\n        userStatusRef.set(true);\n        userStatusRef.onDisconnect().remove();\n      }\n    });\n    return () => {\n      usersRef.off();\n      connectedRef.off();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.user]);\n  useEffect(() => {\n    statusRef.on(\"child_added\", snap => {\n      setConnectedUsersState(currentState => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.key);\n        return updatedState;\n      });\n    });\n    statusRef.on(\"child_removed\", snap => {\n      setConnectedUsersState(currentState => {\n        let updatedState = [...currentState];\n        let index = updatedState.indexOf(snap.key);\n        updatedState.splice(index, 1);\n        return updatedState;\n      });\n    });\n    return () => statusRef.off(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [usersState]);\n\n  const displayUsers = () => {\n    if (usersState.length > 0) {\n      return usersState.filter(user => user.id !== props.user.uid).map(user => {\n        return /*#__PURE__*/React.createElement(Menu.Item, {\n          key: user.id,\n          name: user.name,\n          onClick: () => selectUser(user),\n          active: props.channel && generateChannelId(user.id) === props.channel.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 24\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          name: \"circle\",\n          color: `${connectedUsersState.indexOf(user.id) !== -1 ? \"green\" : \"red\"}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(Notification, {\n          user: props.user,\n          channel: props.channel,\n          notificationChannelId: generateChannelId(user.id),\n          displayName: \"@ \" + user.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }\n        }));\n      });\n    }\n  };\n\n  const selectUser = user => {\n    let userTemp = { ...user\n    };\n    userTemp.id = generateChannelId(user.id);\n    setLastVisited(props.user, props.channel);\n    setLastVisited(props.user, userTemp);\n    props.selectChannel(userTemp);\n  };\n\n  const setLastVisited = (user, channel) => {\n    const lastVisited = usersRef.child(user.uid).child(\"lastVisited\").child(channel.id);\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  };\n\n  const generateChannelId = userId => {\n    if (props.user.uid < userId) {\n      return props.user.uid + userId;\n    } else {\n      return userId + props.user.uid;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Menu.Menu, {\n    style: {\n      marginTop: '35px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Menu.Item, {\n    style: {\n      fontSize: '17px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"mail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }), \" Chat\"), \"(\", usersState.length - 1, \")\"), displayUsers());\n};\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    selectChannel: channel => dispatch(setChannel(channel))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);","map":{"version":3,"sources":["/Users/SWKHAN/Downloads/streamlinify/src/components/SideBar/PrivateChat/PrivateChat.component.jsx"],"names":["React","useState","useEffect","connect","firebase","setChannel","Notification","Menu","Icon","PrivateChat","props","usersState","setUsersState","connectedUsersState","setConnectedUsersState","usersRef","database","ref","connectedRef","statusRef","on","snap","currentState","updatedState","user","val","name","displayName","id","key","isPrivateChat","push","userStatusRef","child","uid","set","onDisconnect","remove","off","index","indexOf","splice","displayUsers","length","filter","map","selectUser","channel","generateChannelId","userTemp","setLastVisited","selectChannel","lastVisited","ServerValue","TIMESTAMP","userId","marginTop","fontSize","mapStateToProps","state","currentUser","currentChannel","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\"\nimport { Notification } from \"../Notification/Notification.component\";\n\nimport { Menu, Icon } from 'semantic-ui-react';\n\nconst PrivateChat = (props) => {\n\n    const [usersState, setUsersState] = useState([]);\n\n    const [connectedUsersState, setConnectedUsersState] = useState([]);\n\n    const usersRef = firebase.database().ref(\"users\");\n\n    const connectedRef = firebase.database().ref(\".info/connected\");\n\n    const statusRef = firebase.database().ref(\"status\");\n\n    useEffect(() => {\n        usersRef.on('child_added', (snap) => {\n            setUsersState((currentState) => {\n                let updatedState = [...currentState];\n\n                let user = snap.val();\n                user.name = user.displayName;\n                user.id = snap.key;\n                user.isPrivateChat = true;\n                updatedState.push(user);\n\n                return updatedState;\n            })\n        });\n\n        connectedRef.on(\"value\", snap => {\n            if (props.user && snap.val()) {\n                const userStatusRef = statusRef.child(props.user.uid);\n                userStatusRef.set(true);\n                userStatusRef.onDisconnect().remove();\n            }\n        })\n\n        return () => { usersRef.off(); connectedRef.off(); }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.user])\n\n    useEffect(() => {\n\n        statusRef.on(\"child_added\", snap => {\n            setConnectedUsersState((currentState) => {\n                let updatedState = [...currentState];\n                updatedState.push(snap.key);\n                return updatedState;\n            })\n        });\n\n        statusRef.on(\"child_removed\", snap => {\n            setConnectedUsersState((currentState) => {\n                let updatedState = [...currentState];\n\n                let index = updatedState.indexOf(snap.key);\n                updatedState.splice(index, 1);\n                return updatedState;\n            })\n        });\n\n        return () => statusRef.off();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [usersState]);\n\n    const displayUsers = () => {\n        if (usersState.length > 0) {\n            return usersState.filter((user) => user.id !== props.user.uid).map((user) => {\n                return <Menu.Item\n                    key={user.id}\n                    name={user.name}\n                    onClick={() => selectUser(user)}\n                    active={props.channel && generateChannelId(user.id) === props.channel.id}\n                >\n                    <Icon name=\"circle\" color={`${connectedUsersState.indexOf(user.id) !== -1 ? \"green\" : \"red\"}`} />\n\n                    <Notification user={props.user} channel={props.channel}\n                        notificationChannelId={generateChannelId(user.id)}\n                        displayName={\"@ \" + user.name} />\n                        \n                </Menu.Item>\n            })\n        }\n    }\n\n    const selectUser = (user) => {\n        let userTemp = { ...user };\n        userTemp.id = generateChannelId(user.id);\n        setLastVisited(props.user, props.channel);\n        setLastVisited(props.user, userTemp);\n        props.selectChannel(userTemp);\n    }\n\n    const setLastVisited = (user, channel) => {\n        const lastVisited = usersRef.child(user.uid).child(\"lastVisited\").child(channel.id);\n        lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n        lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n    }\n\n    const generateChannelId = (userId) => {\n        if (props.user.uid < userId) {\n            return props.user.uid + userId;\n        }\n        else {\n            return userId + props.user.uid;\n        }\n    }\n\n    return <Menu.Menu style={{ marginTop: '35px' }}>\n        <Menu.Item style={{ fontSize: '17px' }}>\n            <span>\n                <Icon name=\"mail\" /> Chat\n            </span>\n            ({usersState.length - 1})\n        </Menu.Item>\n        {displayUsers()}\n    </Menu.Menu>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.currentUser,\n        channel: state.channel.currentChannel\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        selectChannel: (channel) => dispatch(setChannel(channel))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);"]},"metadata":{},"sourceType":"module"}